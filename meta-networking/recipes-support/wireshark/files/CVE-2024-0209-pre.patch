From 6a8c1b9b932d70428356ca35da653d943e799546 Mon Sep 17 00:00:00 2001
From: Gerald Combs <gerald@wireshark.org>
Date: Tue, 14 Apr 2020 16:04:09 -0700
Subject: [PATCH] CVE-2024-0209-pre: epan: Add p_[gs]et_proto_depth and p_set_proto_data.

Upstream-Status: Backport from https://gitlab.com/wireshark/wireshark/-/commit/6a8c1b9b932d70428356ca35da653d943e799546, https://gitlab.com/wireshark/wireshark/-/commit/d0408b8b78086f114fdf31437d801eeacc5cf93f
CVE: CVE-2024-0209

Signed-off-by: Rohini Sangam <rsangam@mvista.com>
---
 .../debian/libwireshark13.symbols             |  3 ++
 .../epan/proto_data.c        | 37 +++++++++++++++++++
 .../epan/proto_data.h        | 37 +++++++++++++++++++
 3 files changed, 77 insertions(+)

diff --git a/debian/libwireshark13.symbols b/debian/libwireshark13.symbols
index c551a55..d68303e 100644
--- a/debian/libwireshark13.symbols
+++ b/debian/libwireshark13.symbols
@@ -992,6 +992,9 @@ libwireshark.so.13 libwireshark13 #MINVER#
  p_add_proto_data@Base 1.9.1
  p_get_proto_data@Base 1.9.1
  p_remove_proto_data@Base 1.12.0~rc1
+ p_set_proto_data@Base 3.7.0
+ p_get_proto_depth@Base 3.3.0
+ p_set_proto_depth@Base 3.3.0
  parse_key_string@Base 1.9.1
  plugin_if_apply_filter@Base 1.99.8
  plugin_if_get_ws_info@Base 2.1.0
diff --git a/epan/proto_data.c b/epan/proto_data.c
index bbb3d4c..bed13a2 100644
--- a/epan/proto_data.c
+++ b/epan/proto_data.c
@@ -108,6 +108,33 @@ p_get_proto_data(wmem_allocator_t *scope, struct _packet_info* pinfo, int proto,
   return NULL;
 }
 
+void
+p_set_proto_data(wmem_allocator_t *scope, struct _packet_info* pinfo, int proto, guint32 key, void *proto_data)
+{
+  proto_data_t  temp;
+  GSList       *item;
+
+  temp.proto = proto;
+  temp.key = key;
+  temp.proto_data = NULL;
+
+  if (scope == pinfo->pool) {
+    item = g_slist_find_custom(pinfo->proto_data, &temp, p_compare);
+  } else if (scope == wmem_file_scope()) {
+    item = g_slist_find_custom(pinfo->fd->pfd, &temp, p_compare);
+  } else {
+    DISSECTOR_ASSERT(!"invalid wmem scope");
+  }
+
+  if (item) {
+    proto_data_t *pd = (proto_data_t *)item->data;
+    pd->proto_data = proto_data;
+    return;
+  }
+
+  p_add_proto_data(scope, pinfo, proto, key, proto_data);
+}
+
 void
 p_remove_proto_data(wmem_allocator_t *scope, struct _packet_info* pinfo, int proto, guint32 key)
 {
@@ -149,6 +176,16 @@ p_get_proto_name_and_key(wmem_allocator_t *scope, struct _packet_info* pinfo, gu
   return wmem_strdup_printf(wmem_packet_scope(),"[%s, key %u]",proto_get_protocol_name(temp->proto), temp->key);
 }
 
+#define PROTO_DEPTH_KEY 0x3c233fb5 // printf "0x%02x%02x\n" ${RANDOM} ${RANDOM}
+
+void p_set_proto_depth(struct _packet_info *pinfo, int proto, unsigned depth) {
+  p_add_proto_data(pinfo->pool, pinfo, proto, PROTO_DEPTH_KEY, GUINT_TO_POINTER(depth));
+}
+
+unsigned p_get_proto_depth(struct _packet_info *pinfo, int proto) {
+  return GPOINTER_TO_UINT(p_get_proto_data(pinfo->pool, pinfo, proto, PROTO_DEPTH_KEY));
+}
+
 /*
  * Editor modelines  -  https://www.wireshark.org/tools/modelines.html
  *
diff --git a/epan/proto_data.h b/epan/proto_data.h
index 617d492..1c20651 100644
--- a/epan/proto_data.h
+++ b/epan/proto_data.h
@@ -32,6 +32,43 @@ WS_DLL_PUBLIC void *p_get_proto_data(wmem_allocator_t *scope, struct _packet_inf
 WS_DLL_PUBLIC void p_remove_proto_data(wmem_allocator_t *scope, struct _packet_info* pinfo, int proto, guint32 key);
 gchar *p_get_proto_name_and_key(wmem_allocator_t *scope, struct _packet_info* pinfo, guint pfd_index);
 
+/**
+ * Set data associated with a protocol.
+ *
+ * This can be used to persist file-scoped data between packets or share
+ * packet-scoped data between dissectors without having to use global
+ * variables.
+ *
+ * If the protocol data list contains a matching entry it will be updated,
+ * otherwise a new entry will be created.
+ *
+ * @param scope The memory scope, either pinfo->pool or wmem_file_scope().
+ * @param pinfo This dissection's packet info.
+ * @param proto The protocol ID.
+ * @param key A unique key for the data.
+ * @param proto_data The data to add.
+ */
+WS_DLL_PUBLIC void p_set_proto_data(wmem_allocator_t *scope, struct _packet_info* pinfo, int proto, guint32 key, void *proto_data);
+
+/**
+ * Initialize or update a per-protocol and per-packet check for recursion, nesting, cycling, etc.
+ *
+ * @param pinfo Packet info for this packet.
+ * @param proto The current protocol.
+ * @param depth The depth to set.
+ */
+WS_DLL_PUBLIC void p_set_proto_depth(struct _packet_info* pinfo, int proto, unsigned depth);
+
+/**
+ * Fetch the current per-protocol and per-packet recursion, nesting, or cycling depth.
+ * @param pinfo Packet info for this packet.
+ * @param proto The current protocol.
+ * @return The current depth.
+ */
+WS_DLL_PUBLIC unsigned p_get_proto_depth(struct _packet_info* pinfo, int proto);
+
+/** @} */
+
 #ifdef __cplusplus
 }
 #endif /* __cplusplus */
-- 
2.24.4

