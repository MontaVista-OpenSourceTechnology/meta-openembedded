From 5e7a3c2e7e118c7f12d5dfda9f9140f638976aa2 Mon Sep 17 00:00:00 2001
From: Benno Schulenberg <bensberg@telfort.nl>
Date: Sun, 28 Apr 2024 10:51:52 +0200
Subject: [PATCH] CVE-2024-5742: files: run chmod and chown on the descriptor, not on the filename

Upstream-Status: Backport from https://github.com/madnight/nano/commit/5e7a3c2e7e118c7f12d5dfda9f9140f638976aa2
CVE: CVE-2024-5742

Signed-off-by: Rohini Sangam <rsangam@mvista.com>
---
 .../src/files.c            | 13 ++++++++++++-
 .../src/nano.c             | 12 +-----------
 .../src/nano.h             |  2 +-
 3 files changed, 14 insertions(+), 13 deletions(-)

diff --git a/src/files.c b/src/files.c
index f9a85c5..0d08a21 100644
--- a/src/files.c
+++ b/src/files.c
@@ -1605,6 +1605,8 @@ bool write_file(const char *name, FILE *thefile, bool tmp,
 #endif
 	char *realname = real_dir_from_tilde(name);
 		/* The filename after tilde expansion. */
+	int fd = 0;
+		/* The descriptor that is assigned when opening the file. */
 	char *tempname = NULL;
 		/* The name of the temporary file we use when prepending. */
 	linestruct *line = openfile->filetop;
@@ -1825,7 +1827,6 @@ bool write_file(const char *name, FILE *thefile, bool tmp,
 	/* When it's not a temporary file, this is where we open or create it. */
 	if (thefile == NULL) {
 		mode_t was_mask = 0;
-		int fd;
 
 		/* When creating an emergency file, don't let others access it. */
 		if (tmp)
@@ -2002,6 +2003,16 @@ bool write_file(const char *name, FILE *thefile, bool tmp,
 		titlebar(NULL);
 	}
 
+#if !defined(NANO_TINY) && defined(HAVE_CHMOD) && defined(HAVE_CHOWN)
+	/* Change permissions and owner of an emergency save file to the values
+	 * of the original file, but ignore any failure as we are in a hurry. */
+	if (method == EMERGENCY && fd && openfile->statinfo) {
+		IGNORE_CALL_RESULT(fchmod(fd, openfile->statinfo->st_mode));
+		IGNORE_CALL_RESULT(fchown(fd, openfile->statinfo->st_uid,
+											openfile->statinfo->st_gid));
+	}
+#endif
+
 	if (!tmp)
 		statusline(HUSH, P_("Wrote %zu line", "Wrote %zu lines",
 								lineswritten), lineswritten);
diff --git a/src/nano.c b/src/nano.c
index be80a07..957be6d 100644
--- a/src/nano.c
+++ b/src/nano.c
@@ -407,7 +407,7 @@ void emergency_save(const char *die_filename, struct stat *die_stat)
 	targetname = get_next_filename(die_filename, ".save");
 
 	if (*targetname != '\0')
-		failed = !write_file(targetname, NULL, TRUE, OVERWRITE, FALSE);
+		failed = !write_file(targetname, NULL, TRUE, EMERGENCY, FALSE);
 
 	if (!failed)
 		fprintf(stderr, _("\nBuffer written to %s\n"), targetname);
@@ -418,16 +418,6 @@ void emergency_save(const char *die_filename, struct stat *die_stat)
 		fprintf(stderr, _("\nBuffer not written: %s\n"),
 				_("Too many backup files?"));
 
-#ifndef NANO_TINY
-	/* Try to chmod/chown the saved file to the values of the original file,
-	 * but ignore any failure as we are in a hurry to get out. */
-	if (die_stat) {
-		IGNORE_CALL_RESULT(chmod(targetname, die_stat->st_mode));
-		IGNORE_CALL_RESULT(chown(targetname, die_stat->st_uid,
-												die_stat->st_gid));
-	}
-#endif
-
 	free(targetname);
 }
 
diff --git a/src/nano.h b/src/nano.h
index a390d1e..a7b120e 100644
--- a/src/nano.h
+++ b/src/nano.h
@@ -151,7 +151,7 @@ typedef enum {
 } message_type;
 
 typedef enum {
-	OVERWRITE, APPEND, PREPEND
+	OVERWRITE, APPEND, PREPEND, EMERGENCY
 } kind_of_writing_type;
 
 typedef enum {
-- 
2.24.4

